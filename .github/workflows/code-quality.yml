name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Check code formatting with Black
      run: |
        black --check --diff src/ tests/
      continue-on-error: false

    - name: Check import sorting with isort
      run: |
        isort --check-only --diff src/ tests/
      continue-on-error: false

    - name: Lint with Flake8
      run: |
        flake8 src/ tests/ \
          --count \
          --statistics \
          --show-source \
          --format=default \
          --output-file=flake8-report.txt
        cat flake8-report.txt
      continue-on-error: false

    - name: Type checking with Mypy
      run: |
        mypy src/ \
          --strict \
          --ignore-missing-imports \
          --show-error-codes \
          --show-column-numbers \
          --pretty \
          --html-report mypy-report \
          --txt-report mypy-report
      continue-on-error: true

    - name: Check docstring coverage
      run: |
        python -m docstr_coverage src/ \
          --badge=docstr-coverage.svg \
          --fail-under=70
      continue-on-error: true

    - name: Upload quality reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: code-quality-reports
        path: |
          flake8-report.txt
          mypy-report/
        retention-days: 30

    - name: Comment PR with quality summary
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          let comment = '## Code Quality Results\n\n';

          try {
            const flake8 = fs.readFileSync('flake8-report.txt', 'utf8');
            const lines = flake8.split('\n');
            const stats = lines.filter(l => l.includes('E') || l.includes('W')).slice(0, 10);

            comment += '### Flake8 Linting\n';
            if (stats.length > 0) {
              comment += '```\n' + stats.join('\n') + '\n```\n';
            } else {
              comment += 'No issues found!\n';
            }
          } catch (e) {
            comment += '### Flake8 Linting\nReport not available\n';
          }

          comment += '\nSee artifacts for detailed reports.\n';

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
      continue-on-error: true

  documentation:
    name: Documentation Build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Build documentation
      run: |
        cd docs
        sphinx-build -W -b html . _build/html
      continue-on-error: true

    - name: Check documentation links
      run: |
        cd docs
        sphinx-build -b linkcheck . _build/linkcheck
      continue-on-error: true

    - name: Upload documentation
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: documentation
        path: docs/_build/html
        retention-days: 30

  complexity-analysis:
    name: Code Complexity Analysis
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install tools
      run: |
        pip install radon xenon

    - name: Calculate cyclomatic complexity
      run: |
        radon cc src/ -a -s
        radon cc src/ -a -s -j > radon-cc.json
      continue-on-error: true

    - name: Calculate maintainability index
      run: |
        radon mi src/ -s
        radon mi src/ -s -j > radon-mi.json
      continue-on-error: true

    - name: Check complexity thresholds
      run: |
        xenon --max-absolute B --max-modules B --max-average A src/
      continue-on-error: true

    - name: Upload complexity reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: complexity-reports
        path: |
          radon-cc.json
          radon-mi.json
        retention-days: 30
