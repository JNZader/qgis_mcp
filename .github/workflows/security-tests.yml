name: Security Tests

on:
  workflow_run:
    workflows: ["Code Quality"]
    types:
      - completed
    branches: [ main, develop ]
  schedule:
    # Run security tests weekly on Monday at 9:00 UTC
    - cron: '0 9 * * 1'

jobs:
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    # Only run if code-quality workflow succeeded (or on schedule)
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'schedule' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run pytest with coverage
      run: |
        pytest tests/ \
          --cov=src/qgis_mcp \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --cov-fail-under=50 \
          --timeout=60 \
          -v \
          -x
      continue-on-error: false

    - name: Run Bandit security linter
      run: |
        bandit -r src/ \
          -f json \
          -o bandit-report.json \
          --severity-level medium \
          --confidence-level medium
        bandit -r src/ \
          -f txt \
          --severity-level medium \
          --confidence-level medium
      continue-on-error: false

    - name: Run Safety dependency scanner
      run: |
        safety check \
          --full-report \
          --json \
          --output safety-report.json \
          || true
        safety check --full-report
      continue-on-error: true

    - name: Run pip-audit vulnerability scanner
      run: |
        pip-audit \
          --desc \
          --format json \
          --output pip-audit-report.json \
          || true
        pip-audit --desc
      continue-on-error: true

    - name: Check for secrets in code
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD
      continue-on-error: true

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          pip-audit-report.json
          htmlcov/
        retention-days: 30

    - name: Create coverage badge
      run: |
        coverage-badge -o coverage.svg -f

    - name: Comment PR with security summary
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          let comment = '## Security Test Results\n\n';

          try {
            const bandit = JSON.parse(fs.readFileSync('bandit-report.json', 'utf8'));
            comment += `### Bandit Security Scan\n`;
            comment += `- **High severity issues**: ${bandit.metrics._totals.SEVERITY.find(s => s.level === 'HIGH')?.count || 0}\n`;
            comment += `- **Medium severity issues**: ${bandit.metrics._totals.SEVERITY.find(s => s.level === 'MEDIUM')?.count || 0}\n\n`;
          } catch (e) {
            comment += '### Bandit Security Scan\nReport not available\n\n';
          }

          comment += `### Test Coverage\nSee detailed report in artifacts.\n`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
      continue-on-error: true

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: moderate
        deny-licenses: GPL-3.0, AGPL-3.0

  security-scan-results:
    name: Security Scan Summary
    runs-on: ubuntu-latest
    needs: [security-tests]
    if: always()
    steps:
    - name: Check security test results
      run: |
        if [ "${{ needs.security-tests.result }}" == "failure" ]; then
          echo "Security tests failed! Please review the security reports."
          exit 1
        fi
        echo "Security tests passed successfully."
